# -*- coding: utf-8 -*-
"""01ex_introduction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Z6baD0GGQ5QUtgafRzjBSykwYHvckqSK
"""



"""1. The HelloWorld replacement

a) Write a program that prints the numbers from 1 to 100. But for multiples of three print "Hello" instead of the number and for the multiples of five print "World". For numbers which are multiples of both three and five print "HelloWorld".

b) Put the result in a tuple and substitute "Hello" with "Python" and "World" with "Works".
"""

#1a

for j in range(1,101):  
    if j%3 == 0 and j%5 == 0:  # when j is multiple of 3 and 5
        print("HelloWorld")
    elif j%5 == 0: #when j is multiple of 5
        print("World")
    elif j%3 == 0: #when j is multiple of 3
        print("Hello")
    else:
        print(j)

#1b In this time i tried to make a function to append items to list then it will return it to a tuple.
def hello_world(x,n):
    l1=[]
    for j in range(x,n+1):  
        if j%3 == 0 and j%5 == 0:  # when j is multiple of 5 and 3
            l1.append("HelloWorld")
        elif j%5 == 0: #when j is multiple of 5
            l1.append("World")
        elif j%3 == 0: #when j is multiple of 3
            l1.append("Hello")
        else:
            l1.append(j)
    return tuple(l1) #turned list to tuple
t2 = hello_world(1,100) 
t2 = list(t2)
for j in range(len(t2)):
#     print(t2[j])
    if t2[j] == "HelloWorld":
        t2[j] = "PythonWorks"
    if t2[j] == "World":
        t2[j] = "Works"
    if t2[j] == "Hello":
        t2[j] = "Python"
        
t2 = tuple(t2) #convert it to tuple


print(t2)

"""2\. The swap function

Write a function that swap the values of two input variables x and y (whatever the type). Try to do that also without a temporary variable
"""

def swap_func(x,y):
    x,y = y,x  
    return x,y


print(swap_func(20, '8'))

"""3\. Computing the distance

Write a function that calculates and returns the euclidean distance between two points *u* and *v*, where *u* and *v* are both 2-tuples *(x,y)*. For example, if *u=(3,0)* and *v=(0,4)*, the function should return 5
"""

def euclidean_distance(t1,t2):
    (x,y) = t1   
    (x2,y2) = t2
    return ((x2-x)**2+(y2-y)**2)**(1/2) 


print(euclidean_distance((0,0),(3,4)))

"""4\. Counting letters

Write a program to calculate the number of times each character occurs in a given string *s*. Ignore differences in capitalization
"""

s = "Write a program that prints the numbers from 1 to 100. \
But for multiples of three print Hello instead of the number and for the multiples of five print World. \
For numbers which are multiples of both three and five print HelloWorld."

def char_counter(string):
    charlist = []  #empty list we are going to fill them with unique characters
    countchar = {} #empty dictionary we are going to fill this with the count of characters
    
    string = string.lower() #to ignore differences in capitalization we need make all lowercase
    
    for i in range(len(string)):  #for every character in the string
        if string[i] not in charlist: #if a character unique for the charlist
            charlist.append(string[i]) #we are going to append it to the charlist
            
        elif string[i] in charlist: #if it is not unique we do nothing
            pass
        
    for i in range(len(charlist)): #for every char in list
        countchar[charlist[i]] = string.count(string[i]) #for every char in list it will make the list item = key, 
                                                         #value = count of the char
                                                        # count() method just counts the char in a list
            
    return  countchar

char_counter(s)



"""5\. Isolating the unique

Write a function that determines and count the unique numbers in the list:
"""

l = [36, 45, 58, 3, 74, 96, 64, 45, 31, 10, 24, 19, 33, 86, 99, 18, 63, 70, 85,
 85, 63, 47, 56, 42, 70, 84, 88, 55, 20, 54, 8, 56, 51, 79, 81, 57, 37, 91,
 1, 84, 84, 36, 66, 9, 89, 50, 42, 91, 50, 95, 90, 98, 39, 16, 82, 31, 92, 41,
 45, 30, 66, 70, 34, 85, 94, 5, 3, 36, 72, 91, 84, 34, 87, 75, 53, 51, 20, 89, 51, 20]

l1 = []

count = 0

for i in l:
    if i not in l1:
        count += 1
        l1.append(i)
    
        
print (count)

"""Do the same without using user-defined functions, but exploiting only the Python data structures."""

print("Unique number: "+str(len(set(l)))) 

#print(len(set(l)))
print("         ")
print("New list: "+str(list(set(l))))

"""6\. Combination of functions

Write two functions - one that returns the square of a number, and one that returns the cube. Now write a third function that returns the number raised to the 6th power using the two previous functions.
"""

def square(n):
    return n**2 


def cube(n):   
    return n**3


def six_power(n): # gof(x) = x*6
    return cube(square(n)) #this is fog(x)

six_power(2)

"""7\. Cubes

Create a list of the cubes of x for x in *[0, 10]* using:

a) a for loop

b) a list comprehension
"""

#a) 
l1 = []
for i in range(1,11):
    l1.append(i**2)
print(l1)

#b) 
l2 = [i**2 for i in range(1,11)]
print(l2)

"""8. List comprehension

Write, using the list comprehension, a single-line expression that gets the same result as the code in the cell below.

a = []
for i in range(3):
    for j in range(4):
        a.append((i, j))
print(a)
"""



"""9\. Nested list comprehension

A Pythagorean triple is an integer solution to the Pythagorean theorem $a^2+b^2=c^2$. The first Pythagorean triple is (3,4,5). Find and put in a tuple all unique Pythagorean triples for the positive integers a, b and c less than 100.
"""

[(a,b,c) for c in range(1,101) for b in range(1,101) for a in range(1,101) if a**2+b**2==c**2]

""" 10.Normalization of a N-dimensional vector

Write a program that takes an N-dimensional vector, e.g. a variable-length tuple of numbers, and normalizes it to one (in such a way that the squared sum of all the entries is equal to 1).
"""

t1=(2,3,4,5,6)
max(t1)
def normalize_tup(tup):
    t2=[] 
    for i in range(len(tup)):
        t2.append(tup[i]/sum(tup)) 
    return tuple(t2)

normalize_tup(tup1)

"""11. The Fibonacci sequence

Calculate the first 20 numbers of the Fibonacci sequence using only for or while loops.
"""



