# -*- coding: utf-8 -*-
"""06ex_OSEMN (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jraC9rdgbkCD1m_0hxPUuZGjl4011r9m
"""

import pandas as pd
import numpy as np
import csv
import numpy.random as npr

"""1\. **Text files**

Perform the following operations on plain `txt` files:

+ create a list of integer numbers and then save it to a text file named `data_int.txt`. Run the `cat` command to print the content of the file.
+ create a matrix of 5x5 floats and then save it to a text file named `data_float.txt`. Use the `cat` command to print the content of the file.
+ load the `txt` file of the previous point and convert it to a `csv` file by hand.
"""

x = np.arange(10)

with open(r'data_int.txt', 'w') as fp:
    for item in x:
        fp.write("%s\n" % item)
    
!type data_int.txt 
#I used type command instead of cat beacuse I couldn't make cat command work on windows
     
matrix = npr.rand(5,5)
with open(r'data_float.txt', 'w') as fp:
    for item in matrix:
        fp.write("%s\n" % item)
      
!type data_float.txt


with open('data_float.txt', 'r') as file:
    load = (line.strip() for line in file)
    lines = (line.split(",") for line in load if line)
    with open('data_float.csv', 'w') as out_file:
        writer = csv.writer(out_file)
        writer.writerow(('SUBJECT', 'INTRODUCTION'))
        writer.writerows(lines)

"""2\. **JSON files**

Load the file *user_data.json*, which can be found at:

- https://www.dropbox.com/s/sz5klcdpckc39hd/user_data.json

and filter the data by the "CreditCardType" when it equals to "American Express". Than save the data to a new CSV file.
"""

#!wget https://www.dropbox.com/s/sz5klcdpckc39hd/user_data.json

import json

data = json.load(open('user_data.json'))
filtered_data = [x for x in data if x['CreditCardType'] == 'American Express']
filtered_data = json.dumps(filtered_data)

print(filtered_data)

newformat = pd.DataFrame(eval(filtered_data))
newformat.to_csv('user_data.csv', index=False,header=True)

"""3\. **CSV files with Pandas**

Load the file from this url:

- https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv

with Pandas. 

+ explore and print the DataFrame
+ calculate, using `groupby()`, the average value of each feature, separately for each class
+ save the file in a JSON format.
"""

#!wget https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv

file_name = "mushrooms_categorized.csv"
data = pd.read_csv(file_name)
#print(data)

calculation = data.groupby('class') 
mean_calculation = calculation.mean()
print(mean_calculation)

a = []
for data in mean_calculation:
    a.append(data)

with open("data.json", "w") as fp:
    json.dump(a, fp)

data = json.load(open('data.json'))
data

"""4\. **Reading the credit card numbers**

Get the binary file named *credit_card.dat* from this address:

- https://www.dropbox.com/s/8m0syw2tkul3dap/credit_card.dat

and convert the data into the real credit card number, knowing that:
- each line corresponds to a credit card number, which consists of 16 characters (which are numbers in the 0-9 range) divided in 4 blocks, with a whitespace between each block
- each character is written using a 6 bit binary representation (including the whitespace)
- the final 4 bits of each line are a padding used to determine the end of the line, and can be ignored

*Hint*: convert the binary numbers to the decimal representation first, and then use the `chr()` function to convert the latter to a char
"""

binary_file = "credit_card.dat"
print("Credit card numbers: \n")

with open(binary_file, 'r') as binary_file:
    for line in binary_file:
        print(''.join([chr(int(line[i:i+6],2)) for i in range(0, len(line), 6)]))

"""5\. **Write data to a binary file**

a) Start from the `data/data_000637.txt` file that we have used during the previous lectures, and convert it to a binary file according to the format defined below:
"""

from IPython.display import Image
Image("images/data_format.png")

"""*Hints*:
- Read the first 10 lines using Pandas
- Iterate over the DataFrame rows
- For every row, ``pack'' the values (features) into a single 64-bit word, according to the format specified above. Use bit-wise shifts and operators to do so.
- Write each 64-bit word to a binary file. You can use `struct` in this way:
```
binary_file.write( struct.pack('<q', word) )
```
where `word` is the 64-bit word.
- Close the file after completing the loop.

b) Check that the binary file is correctly written by reading it with the code used in the lecture `06_OSEMN.ipynb`, and verify that the content of the `txt` and binary files is consistent.

c) What is the difference of the size on disk between equivalent `txt` and binary files?
"""

data2 = pd.read_csv('data/data_000637.txt', nrows = 10)
print(data2)

