# -*- coding: utf-8 -*-
"""06ex_OSEMN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tm828a5oyMajgq-l3_uUImUUEvqZ7Oeq
"""

import pandas as pd
import numpy as np

"""1. Text files

Perform the following operations on plain txt files:

create a list of integrer numbers and then save it to a text file named data_int.txt. Run the cat command to print the content of the file.
create a matrix of 5x5 floats and then save it to a text file named data_float.txt. Use the cat command to print the content of the file.
load the txt file of the previous point and convert it to a csv file by hand.

"""

list_int = np.arange(10)

textfile_integer = open("/content/data_init.txt", "w")

for element in list_int:
    textfile_integer.write(str(element) + "\n")
textfile_integer.close()

!type data_int.txt #this is to replacement for cat command in windows

#also this works too:


# with open("data/data_int.txt", mode = 'r') as f:
#     # print-out the whole file
    
#     for line in f:
#         # print line by line
#         print(line)

list_float_5x5 = np.arange(1,26,dtype = float).reshape(5,5) #created 25 element array then make it 5x5

np.savetxt('data_float.txt',list_float_5x5) #saved it to txt

csv = open("data/data_float.csv", "w")


with open('data/data_float.csv', 'w', newline='') as file:
    for element in list_float_5x5:
        file.write(str(element) + ",")
    file.close()
    

pd.read_csv('data/data_float.csv')

"""2. JSON files

Load the file user_data.json, which can be found at:

https://www.dropbox.com/s/sz5klcdpckc39hd/user_data.json
and filter the data by the "CreditCardType" when it equals to "American Express". Than save the data to a new CSV file.
"""

import json # import the JSON module
data = json.load(open('/content/user_data (2).json'))
with open('/content/user_data (2).json') as f:
    data = json.load(f)
#data['ID']['JobTitle']['EmailAddress']['FirstNameLastName']['CreditCard']['CreditCardType'] #the colum names
data = pd.DataFrame(data)
new_DF = data[data['CreditCardType'] == 'American Express'] #filtered CreditCardType == American Express
new_DF.to_csv("Filtered_User_Data.csv")
new_DF

"""3. CSV files with Pandas

Load the file from this url:

https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv
with Pandas.

explore and print the DataFrame
calculate, using groupby(), the average value of each feature, separately for each class
save the file in a JSON format
"""

#data = pd.read_csv('https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv')
data = pd.read_csv('https://www.dropbox.com/s/kgshemfgk22iy79/mushrooms_categorized.csv?dl=1')
#get tokinize error so added '?dl=1' the end of the url to load it

data

mean_group = data.groupby(['class']).mean()
print(mean_group)

"""4. Reading the credit card numbers

Get the binary file named credit_card.dat from this address:

https://www.dropbox.com/s/8m0syw2tkul3dap/credit_card.dat
and convert the data into the real credit card number, knowing that:

each line corresponds to a credit card number, which consists of 16 characters (which are numbers in the 0-9 range) divided in 4 blocks, with a whitespace between each block
each character is written using a 6 bit binary representation (including the whitespace)
the final 4 bits of each line are a padding used to determine the end of the line, and can be ignored
Hint: convert the binary numbers to the decimal representation first, and then use the chr() function to convert the latter to a char
"""

binar = pd.read_csv("/content/credit_card.dat")

def bin2int2char(n):  #input is string we have to slice it to 6 chars
    
    a = str() #empty string; we are going to append new chars to it
    for i in range(0,len(str(n))-6,6): #this returns i = [0,6,12,...114] IT AUTOMATICALLY IGNORES LAST 4 DIGIT
        charr = chr(int(n[i:i+6],2))  #takes the string slices it, makes it binary to dec
                                        #and converts that val to char
        a+=charr #adds char to the string a
    return a

#make it dataframe



binar[binar.columns[0]] = binar[binar.columns[0]].apply(bin2int2char) #aplying the function to every row


#Rename the column 
binar.rename(columns={binar.columns[0]:bin2int2char(binar.columns[0])})

#manual csv 
#testing

binar2 = pd.read_csv("/content/credit_card.dat")

testval = binar2[binar2.columns[0]][0]
bin2int2char(testval)
print((bin2int2char(testval)))

"""5. Write data to a binary file

a) Start from the data/data_000637.txt file that we have used during the previous lectures, and convert it to a binary file according to the format defined below:
"""

from IPython.display import Image
Image("images/data_format.png")

"""Hints:

Read the first 10 lines using Pandas
Iterate over the DataFrame rows
For every row, ``pack'' the values (features) into a single 64-bit word, according to the format specified above. Use bit-wise shifts and operators to do so.
Write each 64-bit word to a binary file. You can use struct in this way:
binary_file.write( struct.pack('
where word is the 64-bit word.

Close the file after completing the loop.
b) Check that the binary file is correctly written by reading it with the code used in the lecture 06_OSEMN.ipynb, and verify that the content of the txt and binary files is consistent.

c) What is the difference of the size on disk between equivalent txt and binary files?
"""

